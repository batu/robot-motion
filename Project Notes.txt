//Interface

main() {
	double Sx; //Start x coordinate
	double Sy; //Start y coordinate
	double Ex; //End x coordinate
	double Ey; //End y coordinate

	/*The input will take the form of:

		1 Sx Sy //Start x and y coordinate
		2 Ex Ey //End x and y coordinate
		3 3 2 5 9 21 2 31 7 // the coordinates of an obstacle - arranged in order x y x y x y x y

	vector < vector <double>> Input_Graph;
}



//Classes

class Linked_List_Node {
}

class Node{
	public:
	
	double x; //x-coordinate
	double y; //y-coordinate
	bool is_path; //Boolean that identifies whether this node is part of the final path (set by Djikstra)
	Node* neighbours; // pointers to the neighbours. Doule linked list.
	Node visi_neighbours; //Vector array of neighbours in the visibility graph
	
	}
	
class Graph{
    public:
  
    vector Node* 
    // Dijkstra can be part of this
}


    // Take the start and end as the obstacle.
    // Consider keeping a visible-angle on each node
	// First check the quadrants then check the raito.
	
	
class AVL{

    void compare;
}

sort a vector of sorted angles. Vector of pointers.
4 quadrants, first step compare quadrants the second step is to compare values.

